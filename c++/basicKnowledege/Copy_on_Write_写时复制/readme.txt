Scott Meyers推荐我们，在真正需要一个存储空间时才去声明变量（分配内存），这样会得到程序在运行时最小的内存花销
执行到那才会去做分配内存这种比较耗时的工作，这会给我们的程序在运行时有比较好的性能
写时才拷贝（Copy-On- Write）技术，是编程界“懒惰行为”——拖延战术的产物
C++曾在性能问题上被广泛地质疑和指责过，为了提高性能，STL中的许多类都采用了Copy-On-Write技术。
这种偷懒的行为的确使用STL的程序有着比较高的性能。

COW的原理（以string类来说明）：
> Copy-On-Write一定使用了“引用计数”,必然有一个变量类似于RefCnt
> 当第一个string对象str1构造时，string的构造函数会根据传入的参数从堆上分配内存
> 当有其它string对象复制str1时，这个RefCnt会自动加1
> 当有对象析构时，这个计数会减1；直到最后一个对象析构时，RefCnt为0，此时，程序才会真正的释放这块从堆上分配的内存

COW的实现：
> String类创建的对象的内存是在堆上动态分配的，既然共享内存的各个对象指向的是同一个内存区
> 那我们就在这块共享内存上多分配一点空间来存放这个引用计数RefCnt
> 这样一来，所有共享一块内存区的对象都有同样的一个引用计数
> 当为string对象分配内存时，我们要多分配一个空间用来存放这个引用计数的值
> 只要发生拷贝构造或赋值时，这个内存的值就会加1。
> 而在内容修改时，string类为查看这个引用计数是否大于１，
> 如果refcnt大于1，表示有人在共享这块内存，那么自己需要先做一份拷贝，然后把引用计数减去1，再把数据拷贝过来
